// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

// Updated to use both pooled and direct connections for Supabase
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}


// Define your models here
model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  notifications Notification[] // Add relation to notifications
  role          String         @default("user") 
  userRoles     UserRole[]     // Add relation to UserRole model
  projects      Project[]      // Add relation to projects
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// New Notification model
model Notification {
  id         String    @id @default(cuid())
  userId     String
  title      String
  message    String
  type       String    // "info", "success", "warning", "error", "system"
  priority   String    @default("medium") // "low", "medium", "high", "urgent"
  read       Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  readAt     DateTime?
  category   String?
  link       String?
  metadata   Json?     // Changed from String to Json for PostgreSQL
  persistent Boolean   @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([read])
  @@index([type])
  @@index([category])
}

// For handling multiple roles per user
model UserRole {
  id     String @id @default(cuid())
  userId String
  role   String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, role])
  @@index([userId])
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  status      String   @default("active") // "active", "archived", "deleted"
  metadata    Json?    // For storing additional project-specific data

  // Relation to user
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
}